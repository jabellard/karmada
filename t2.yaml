apiVersion: operator.karmada.io/v1alpha1
kind: Karmada
metadata:
  name: t2
  namespace: t2
spec:
  components:
    etcd:
      local:
        imagePullPolicy: IfNotPresent
        imageRepository: registry.k8s.io/etcd
        imageTag: 3.5.13-0
        replicas: 1
        resources: {}
        volumeData:
          emptyDir: {}
    karmadaAPIServer:
      certSANs:
      - 192.168.1.241
      imagePullPolicy: IfNotPresent
      imageRepository: registry.k8s.io/kube-apiserver
      imageTag: v1.28.9
      replicas: 1
      resources: {}
      serviceSubnet: 10.96.0.0/12
      serviceType: NodePort
    karmadaAggregatedAPIServer:
      imagePullPolicy: IfNotPresent
      imageRepository: docker.io/karmada/karmada-aggregated-apiserver
      imageTag: v1.9.0
      replicas: 1
      resources: {}
    karmadaControllerManager:
      imagePullPolicy: IfNotPresent
      imageRepository: docker.io/karmada/karmada-controller-manager
      imageTag: v1.9.0
      replicas: 1
      resources: {}
    karmadaMetricsAdapter:
      imagePullPolicy: IfNotPresent
      imageRepository: docker.io/karmada/karmada-metrics-adapter
      imageTag: v1.9.0
      replicas: 2
      resources: {}
    karmadaScheduler:
      imagePullPolicy: IfNotPresent
      imageRepository: docker.io/karmada/karmada-scheduler
      imageTag: v1.9.0
      replicas: 1
      resources: {}
    karmadaWebhook:
      imagePullPolicy: IfNotPresent
      imageRepository: docker.io/karmada/karmada-webhook
      imageTag: v1.9.0
      replicas: 1
      resources: {}
    kubeControllerManager:
      imagePullPolicy: IfNotPresent
      imageRepository: registry.k8s.io/kube-controller-manager
      imageTag: v1.28.9
      replicas: 1
      resources: {}
  crdDownloadPolicy: IfNotPresent
  crdRemoteURL: https://github.com/karmada-io/karmada/releases/download/v1.9.2/crds.tar.gz
  hostCluster:
    networking:
      dnsDomain: cluster.local